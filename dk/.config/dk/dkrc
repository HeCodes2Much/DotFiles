#!/usr/bin/env bash
#-*-coding:utf-8 -*-
#Auto updated?
#   Yes
#File:
#   dkrc
#Author:
#   The-Repo-Club [wayne6324@gmail.com]
#Github:
#   https://github.com/The-Repo-Club/
#
#Created:
#   Sun 23 April 2023, 09:31:18 PM [GMT+1]
#Modified:
#   Mon 24 April 2023, 05:07:42 PM [GMT+1]
#
#Description:
#   Config for DK Window Manager
#
#Dependencies:
#   dk, bash
#

# Autostart stuff if its not already started
if [[ -f "$HOME/.config/dk/scripts/autostart" ]]; then
    sh "$HOME/.config/dk/scripts/autostart"
fi

# example dkrc to show some basic command usage and error reporting

# determine where to place the log file
logfile="$HOME/.dkrc.log"
[ -d "$HOME/.local/share/xorg" ] && logfile="$HOME/.local/share/xorg/dkrc.log"
: > "$logfile"


# (re)load sxhkd for keybinds
if hash sxhkd >/dev/null 2>&1; then
	pkill sxhkd
	sxhkd -c "$HOME/.config/dk/sxhkdrc" &
fi

# adjust border widths based on the DPI of the monitor
px=$(xrandr | grep ' connected' | tail -n1 | grep -o '[0-9]\+x[0-9]\+' | cut -d'x' -f2)
mm=$(xrandr | grep ' connected' | tail -n1 | grep -o '[0-9]\+mm' | tail -n1 | sed 's/mm//')
dpi=$(( (px / mm) * 25 ))

if [ $dpi -ge 140 ]; then
	border_width=16
	border_outer_width=8
elif [ $dpi -ge 120 ]; then
	border_width=10
	border_outer_width=5
else
	border_width=6
	border_outer_width=3
fi

{ # compound command to redirect all output

	# workspace settings
	# ------------------------

	# initialize 10 workspaces (1-10) (default: 1/monitor)
	dkcmd set numws=10

	# default workspace '_' values used when allocating new workspaces
	# can be applied to all existing workspaces when passed 'apply' after ws=_
	dkcmd set ws=_ apply layout=tile master=1 stack=3 gap=5 msplit=0.5 ssplit=0.5

	# use grid layout, padding, and gaps on workspace 10
	dkcmd set ws=10 layout=grid pad left=25 right=25 top=25 bottom=25 gap=25

	# change workspace names (default: number == name)
	dkcmd set \
		ws=1  name="1: Terminal" \
		ws=2  name="2: Editor" \
		ws=3  name="3: Files" \
		ws=4  name="4: Graphics" \
		ws=5  name="5: Music" \
		ws=6  name="6: WebBrowser" \
		ws=7  name="7: Mail" \
		ws=8  name="8: Games" \
		ws=9  name="9: Chat" \
		ws=10 name="10: Settings"

	# enable static workspaces and assign them to monitors (only relevant for multiple monitors)
	# aside -
	#       many that come from other workspace models tried dk and requested this feature
	#       try embracing the default behaviour and allow access to any workspace from any monitor
	#       you might end up liking it :)
	#
	mon1=$(xrandr --query | grep " connected" | grep "primary" | cut -d" " -f1)
	mon2=$(xrandr --query | grep " connected" | grep -v "primary" | cut -d" " -f1)
    [ -z "$mon2" ] && mon2="$mon1"
	dkcmd set static_ws=true \
		ws=1  mon="$mon1" \
		ws=2  mon="$mon1" \
		ws=3  mon="$mon1" \
		ws=4  mon="$mon1" \
		ws=5  mon="$mon1" \
		ws=6  mon="$mon2" \
		ws=7  mon="$mon2" \
		ws=8  mon="$mon2" \
		ws=9  mon="$mon2" \
		ws=10 mon="$mon2"


	# global settings
	# ---------------------

	# focus windows when receiving activation and enable focus-follows-mouse
	dkcmd set focus_open=true focus_urgent=true focus_mouse=true

	# place clients at the tail and ignore size hints on tiled windows
	dkcmd set tile_tohead=0 tile_hints=false

	# minimum width/height for resizing, and minimum allowed on-screen when moving
	dkcmd set win_minwh=50 win_minxy=10

	# disable gaps and borders in single window layouts
	dkcmd set smart_gap=true smart_border=false

	# define mouse mod and move/resize buttons
	dkcmd set mouse mod=alt move=button1 resize=button3


	# borders
	# ---------

	# traditional
	# set border width and colour for each window state
	# dkcmd set border width=$border_width colour focus='#6699cc' unfocus='#000000' urgent='#ee5555'

	# alternative
	# enable split borders and colours, width is overall width, outer_width consumes some of width.
	# outer_width must be less than width, outer_width of 0 will be single borders
	dkcmd set border width=$border_width outer_width=$border_outer_width \
		colour \
		focus='#6699cc' \
		unfocus='#444444' \
		urgent='#ee5555' \
		outer_focus='#222222' \
		outer_unfocus='#222222' \
		outer_urgent='#222222'


	# window rules
	# --------------

    # delete all rules
	dkcmd rule remove '*'

    # Assign application to start on a specific workspace
    # you can find the class with the program xprop

    # sign via class
    # Workspace ws=1
	dkcmd rule class="^Alacritty$" ws=1 focus=true
    dkcmd rule class="^Kitty$" ws=1 focus=true

    # Workspace ws=2
    dkcmd rule class="^Emacs$" ws=2 focus=true
    dkcmd rule class="^Code$" ws=2 focus=true
    dkcmd rule class="^Nvim$" ws=2 focus=true

    # Workspace ws=3
	dkcmd rule class="^Nemo$" ws=3 focus=true

    # Workspace ws=4
	dkcmd rule class="^Aseprite$" ws=4 focus=true
    dkcmd rule class="^Krita$" ws=4 focus=true

    # Workspace ws=5
	dkcmd rule class="^Xephyr$" ws=5 focus=true
    dkcmd rule class="^CmusImage$" ws=5 focus=true

    # Workspace ws=6
	dkcmd rule class="^Firefox$" ws=6 focus=true
    dkcmd rule class="^Google-Chrome$" ws=6 focus=true

    # Workspace ws=7
	dkcmd rule class="^Mail$" ws=7 focus=true
    dkcmd rule class="^Thunderbird$" ws=7 focus=true
    dkcmd rule class="^Keybase$" ws=7 focus=true

    # Workspace ws=8
	dkcmd rule class="^Minecraft$" ws=8 focus=true
    dkcmd rule class="^Steam$" ws=8 focus=true
    dkcmd rule class="^PrismLauncher$" ws=8 focus=true
    dkcmd rule class="^0ad$" ws=8 focus=true
    dkcmd rule class="^Minetest$" ws=8 focus=true

    # Workspace ws=9
	dkcmd rule class="^Discord$" ws=9 focus=true
    dkcmd rule class="^Element$" ws=9 focus=true

    # Workspace ws=10
	dkcmd rule class="^Jetbrains$" ws=10 focus=true
    dkcmd rule class="^PkgBrowser$" ws=10 focus=true
    dkcmd rule class="^Actions$" ws=10 focus=true
    dkcmd rule class="^Btop$" ws=10 focus=true
    dkcmd rule class="^Piper$" ws=10 focus=true
    dkcmd rule class="^LazyGit$" ws=10 focus=true
    dkcmd rule class="^Virt$" ws=10 focus=true
    dkcmd rule class="^Dconf-Editor$" ws=10 focus=true

    dkcmd rule class="^wm-cheat.py$" stick=true float=true w=920 h=720 x=center y=center

	# open window(s) and use a callback function (user defined in config.h)
	# we also ignore=true to stop the window from being resized on it's own from events
	# eg. mpv --x11-name=albumart /path/to/media
	dkcmd rule class="^mpv$" instance="^albumart$" float=true ignore=true callback=albumart bw=0

	# open window(s) in a floating state
	dkcmd rule class="^(pavucontrol|transmission-gtk|lxappearance)$" float=true

	# open window(s) with a specific geometry and coordinates (floating only!)
	dkcmd rule class="^google-chrome$" title="^open files$" float=true w=1280 h=720

	# open window(s) with sticky and floating enabled to view on all workspaces.
	dkcmd rule class="^stickyterm$" stick=true float=true w=1280 h=720

	# apply current rule set to all existing windows (useful for WM reload/restart)
	dkcmd rule apply '*'

} >> "$logfile" 2>&1 # append responses

# inform of any errors in a notification
if grep -q 'error:' "$logfile"; then
	hash notify-send && notify-send -t 0 -u critical "dkrc has errors" \
		"$(awk '/error:/ {sub(/^error: /, ""); gsub(/</, "\<"); print}' "$logfile")"
	exit 1
fi

exit 0
